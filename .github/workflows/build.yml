# Thanks https://gist.github.com/youhide/121750fc4878801ea8e908080b535beb

name: Build Binaries

on:
  push:
    tags:
      - '*'

jobs:
  upload-release:

    runs-on: ubuntu-latest
    needs: [build-linux]
    # needs: [build-linux, build-windows, build-macos]

    steps:
    - uses: actions/checkout@v1
    - name: Create release
      id: create_release
      uses: actions/create-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false   
    - name: Download artifacts
      uses: actions/download-artifact@v1
      with:
        name: uploads    
    - name: upload linux
      id: upload-linux
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./uploads/linux.zip
        asset_name: linux.zip
        asset_content_type: application/zip   
    # - name: Upload macos
    #   id: upload-macos 
    #   uses: actions/upload-release-asset@v1.0.1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./uploads/macos.zip
    #     asset_name: macos.zip
    #     asset_content_type: application/zip  
    # - name: upload windows
    #   id: upload-windows
    #   uses: actions/upload-release-asset@v1.0.1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./uploads/windows.zip
    #     asset_name: windows.zip
    #     asset_content_type: application/zip                        


  build-linux:

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu_Latest_GCC",
            os: ubuntu-latest,
            artifact: "blast-dbf",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
        # - {
        #     name: "Windows Latest MSVC",
        #     os: windows-latest,
        #     artifact: "blast-dbf.exe",
        #     build_type: "Release",
        #     cc: "cl",
        #     cxx: "cl",
        #     environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
        #     archiver: "7z a",
        #     generators: "Visual Studio 16 2019"
        #   }
        # - {
        #     name: "Windows Latest MinGW",
        #     os: windows-latest,
        #     artifact: "windows_mingw.7z",
        #     build_type: "Release",
        #     cc: "gcc",
        #     cxx: "g++",
        #     archiver: "7z a",
        #     generators: "Ninja"
        #   }
        # - {
        #     name: "macOS Latest Clang",
        #     os: macos-latest,
        #     artifact: "macos_clang.7z",
        #     build_type: "Release",
        #     cc: "clang",
        #     cxx: "clang++",
        #     archiver: "7za a",
        #     generators: "Ninja"
        #   }

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          gcc --version
          
      # - name: Install dependencies on windows
      #   if: startsWith(matrix.config.os, 'windows')
      #   run: |
      #     choco install ninja cmake
      #     ninja --version
      #     cmake --version
      #   # cmd "${{ matrix.config.environment_script }}"

      # - name: Install dependencies on MacOS
      #   if: startsWith(matrix.config.os, 'macos')
      #   run: |
      #     brew install p7zip cmake ninja
      #     ninja --version
      #     cmake --version

      - name: Build
        shell: bash
        run: make

      - name: Test
        shell: bash
        run: make test

      - name: Pack
        shell: bash
        run: |
          ls -lhaR
          ${{ matrix.config.archiver }} ${{ matrix.config.artifact }} .
          ls -lhaR

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          path: ./${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

      - name: Upload release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: ${{ matrix.config.artifact }}
          asset_content_type: application/octet-stream
